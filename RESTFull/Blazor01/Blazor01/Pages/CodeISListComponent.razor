@page "/set-params-async/{Param?}"

@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Web
@using RESTFull.Domain.Model
@using RESTFull.Domain

<h3>Список кодов в инф.ресурсе</h3>
<p>@MessageAdd</p>

@if (fulfil && CodeIS_s == null)
{
    <p>Пользователи отсутствуют.</p>
}
else if (!fulfil && CodeIS_s == null)
{
    <p>Идет загрузка...</p>
}

@if (CodeIS_s != null)
{
    <table>
        <tr>
            <th>ID</th>            
            <th>Тип инф.ресурса</th>
            <th>Код</th>
        </tr>
        @foreach (var сodeIS_s in CodeIS_s)
        {
            <tr>
                <td>@сodeIS_s.ID</td>
                <td>@сodeIS_s.Type</td>
                <td>@сodeIS_s.Code</td>
                <td><a class="custom-button" href="AddPerson">Добавить человека</a></td>
                <td><button class="delete-button" @onclick="() => DeleteCodeIS(сodeIS_s.ID)">Удалить код</button></td>

            </tr>
        }
    </table>
    
}

@code {
    [Parameter]
    public string MessageAdd { get; set; }

    public List<CodeIS> CodeIS_s { get; set; } = new List<CodeIS>();
    private bool fulfil = false;

    protected override async Task OnParametersSetAsync() =>
        CodeIS_s = await Http.GetFromJsonAsync<List<CodeIS>>
            ("https://localhost:7046/api/CodeIS");

    protected override async Task OnInitializedAsync()  
    {
        CodeIS_s = await Http.GetFromJsonAsync<List<CodeIS>>
            ("https://localhost:7046/api/CodeIS");
        fulfil = true;
    }
    
    public EventCallback<string> OnDeletePerson { get; set; }

    private async Task DeleteCodeIS(int ID)
    {
        Console.WriteLine(ID);
        await Http.DeleteAsync("https://localhost:7046/api/CodeIS/" + ID);
    }
}
